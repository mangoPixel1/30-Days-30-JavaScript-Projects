I am using these color schemes in my App.css for my React web app that change based on the location selected.
My CSS already handles changing the background colors for the body, header, and footer when the location is changed.
What I want is to change the send button color for the contact component to match the color of the header and footer of the selected location.

:root {
	--evergreen-header-footer-bg: #6b9080;
	--evergreen-body-bg: #cce3de;

	--cedar-grove-header-footer-bg: #1a3a5e;
	--cedar-grove-body-bg: #c5d5e4;

	--sagebrush-hills-header-footer-bg: #b39200;
	--sagebrush-hills-body-bg: #f6eac2;

	--maplewood-park-header-footer-bg: #b34700;
	--maplewood-park-body-bg: #f5deb3;
}

App.jsx:
import React, { useState, useEffect } from "react";
import "./App.css";

// Components
import Header from "./components/header/Header";
import Footer from "./components/footer/Footer";
import Contact from "./components/contact/Contact";

// Context
import LocationContext from "./LocationContext";

function App() {
	const [location, setLocation] = useState(() => {
		// Load location from local storage, default to "cedar-grove"
		return localStorage.getItem("location") || "cedar-grove";
	});

	useEffect(() => {
		// Save location to local storage whenever it changes
		localStorage.setItem("location", location);

		// Apply location class to body element
		document.body.className = location;
	}, [location]);

	return (
		<LocationContext.Provider value={{ location, setLocation }}>
			<Header />
			<Contact />
			<Footer />
		</LocationContext.Provider>
	);
}

export default App;

Contact.jsx:
import React, { useState } from "react";
import styles from "./Contact.module.css";

function Contact() {
	const [formData, setFormData] = useState({
		firstName: "",
		lastName: "",
		email: "",
		phone: "",
		message: ""
	});
	const [errors, setErrors] = useState({});
	const [isSubmitted, setIsSubmitted] = useState(false);

	const handleChange = e => {
		const { name, value } = e.target;
		setFormData(prevData => ({
			...prevData,
			[name]: value
		}));
	};

	const validateForm = () => {
		const newErrors = {};
		if (!formData.firstName.trim()) newErrors.firstName = "First name is required";
		if (!formData.lastName.trim()) newErrors.lastName = "Last name is required";
		if (!formData.email.trim()) newErrors.email = "Email is required";
		if (!formData.message.trim()) newErrors.message = "Message is required";

		setErrors(newErrors);
		return Object.keys(newErrors).length === 0;
	};

	const handleSubmit = e => {
		e.preventDefault();
		if (validateForm()) {
			// Form is valid, submit the data here (e.g., send it to a server)
			console.log("Form submitted:", formData);
			setIsSubmitted(true);

			// Reset form fields
			setFormData({
				firstName: "",
				lastName: "",
				email: "",
				phone: "",
				message: ""
			});
		}
	};

	return (
		<main className={styles.main}>
			<div className={styles.formContainer}>
				<h1>Contact Us</h1>
				<form id="contactForm" className={styles.form} onSubmit={handleSubmit} noValidate>
					<label htmlFor="firstName">First Name</label>
					<input type="text" id="firstName" name="firstName" value={formData.firstName} onChange={handleChange} />
					{errors.firstName && <span className={styles.error}>{errors.firstName}</span>}

					<label htmlFor="lastName">Last Name</label>
					<input type="text" id="lastName" name="lastName" value={formData.lastName} onChange={handleChange} />
					{errors.lastName && <span className={styles.error}>{errors.lastName}</span>}

					<label htmlFor="email">Email</label>
					<input type="email" id="email" name="email" value={formData.email} onChange={handleChange} />
					{errors.email && <span className={styles.error}>{errors.email}</span>}

					<label htmlFor="phone">Phone (Optional)</label>
					<input type="tel" id="phone" name="phone" value={formData.phone} onChange={handleChange} />

					<label htmlFor="message">Message</label>
					<textarea id="message" name="message" value={formData.message} onChange={handleChange}></textarea>
					{errors.message && <span className={styles.error}>{errors.message}</span>}

					<button type="submit" className={styles.sendButton}>
						Send
					</button>
				</form>
				{isSubmitted && <div className={`${styles.message} ${styles.messageSent}`}>Message sent. You will hear back from us soon.</div>}
				{Object.keys(errors).length > 0 && <div className={`${styles.message} ${styles.messageError}`}>Please fill in all required fields.</div>}
			</div>
		</main>
	);
}

export default Contact;
